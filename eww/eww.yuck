
(defpoll time :interval "1s" "date +\"%H:%M\"")
(defpoll date :interval "1s" "date +\"%A %b %d\"")


(defwidget time [] 
		(box :class "win" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 0
			 (label :class "time" 
                    :valign "start" 
                    :wrap "true" 
                    :limit-width 25 
                    :text time)
			  (label :class "day_class" 
                     :valign "start" 
                     :text date)))

(defwidget system []
  (box :class "win" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value { EWW_BATTERY.BAT0.capacity }
                :class {EWW_BATTERY.BAT0.status =~ "Full" ? "sys_dial green" :
								EWW_BATTERY.BAT0.capacity < 20 ? "sys_dial red" : "sys_dial yellow"}
                :thickness 11
				    		:color "00ff00"
            (label :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_RAM.used_mem_perc}
	              :class {EWW_RAM.used_mem_perc < 70  ? "sys_dial green" :
		              EWW_RAM.used_mem_perc < 90  ? "sys_dial yellow" : "sys_dial red"}
                :thickness 11
            (label :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_DISK["/"].used_perc}
	              :class {EWW_DISK["/"].used_perc < 70  ? "sys_dial green" :
		              EWW_DISK["/"].used_perc < 90  ? "sys_dial yellow" : "sys_dial red"}
                :thickness 11
            (label  :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0)))))

(defwidget cpus []
  (box :class "win cpu_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "cpu_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_CPU.cores[0].usage}
	              :class {EWW_CPU.cores[0].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[0].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[1].usage}
	              :class {EWW_CPU.cores[1].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[1].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[2].usage}
	              :class {EWW_CPU.cores[2].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[2].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[3].usage}
	              :class {EWW_CPU.cores[3].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[3].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false)))
      (box :class "cpu_box_i" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_CPU.cores[4].usage}
	              :class {EWW_CPU.cores[4].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[4].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[5].usage}
	              :class {EWW_CPU.cores[5].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[5].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[6].usage}
	              :class {EWW_CPU.cores[6].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[6].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[7].usage}
	              :class {EWW_CPU.cores[7].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[7].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
)))


(deflisten pct_title :initial "" "playerctl --follow metadata --format '{{title}}'"	)
(deflisten pct_artist :initial "" "playerctl --follow metadata --format '{{artist}}'"	)
(deflisten pct_img :initial "" "bash ~/dotfiles/eww/scripts/music.sh")

(defwidget sound []
	(box :class "win" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 0
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${pct_img}');")
		(box :class "music_box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 0
			  (label :class "music_title" :text {pct_title} :wrap true)
			  (label :class "music_artist" :text {pct_artist} :wrap true)
				; TODO: maybe add buttons and volume bar
	)
))


(deflisten ws-dp :initial "[]" "bash ~/dotfiles/eww/scripts/hypr.sh w eDP-1")
(deflisten ws-hd :initial "[]" "bash ~/dotfiles/eww/scripts/hypr.sh w HDMI-A-3" )
(deflisten cur-dp :initial "1" "bash ~/dotfiles/eww/scripts/hypr.sh c eDP-1")
(deflisten cur-hd :initial "1" "bash ~/dotfiles/eww/scripts/hypr.sh c HDMI-A-3" )
; ; (deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/hypr.sh a")

; TODO: switching to watching one big JSON object would be better
(defwidget hyprland [] 
  ; (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "win" :space-evenly true :orientation "h"
    (label :text "${cur-dp}" :visible false)
    (label :text "${cur-hd}" :visible false)
    (box :class "mon-box" :space-evenly false :orientation "v"
      (for ws in ws-dp
        (eventbox :onclick "hyprctl dispatch workspace ${ws}"
          (box :class "ws-box ${ws == cur-dp ? "ws-active" : ""}" 
            (label :text "${ws}" )
            )
          )
        )
      )
    (box :class "mon-box" :space-evenly false :orientation "v"
      (for ws in ws-hd
        (eventbox :onclick "hyprctl dispatch workspace ${ws}"
          (box :class "ws-box ${ws == cur-hd ? "ws-active" : ""}" 
            (label :text {ws})
            )
          )
        )
      )
		)
  )

(defwindow time
  :monitor 0 :namespace "eww" :stacking "fg" :geometry (geometry 
		:width "340px"
		:height "90px"
		:x "5px"
		:y "5px")
  (time))

(defwindow sys_usg
  :monitor 0 :namespace "eww" :stacking "fg" :geometry (geometry 
		:width "340px"
		:height "120px"
		:x "5px"
		:y "100px")
  (system))

(defwindow sys_cpu
  :monitor 0 :namespace "eww" :stacking "fg" :geometry (geometry 
		:width "340px"
		:height "130px"
		:x "5px"
		:y "225px")
  (cpus))

(defwindow sound
  :monitor 0 :namespace "eww" :stacking "fg" :geometry (geometry 
		:width "340px"
		:height "160px"
		:x "5px"
		:y "360px")
  (sound))
	
(defwindow hypr
  :monitor 0 :namespace "eww" :stacking "fg" :geometry (geometry 
		:width "340px"
		:height "90px"
		:x "5px"
		:y "525px")
  (hyprland))
