


(defpoll time_hour :interval "5m"
       "date +\"%I\"")
(defpoll time_min :interval "5s"
       "date +\"%M\"")
(defpoll time_day :interval "30m"
       "date +\"%d\"")
(defpoll time_month :interval "48h"
      "date +\%m")
(defpoll time_day_name :interval "30m"
       "date +\"%A\"")
(defpoll time_month_name :interval "48h"
      "date +\%B")




(defwidget time [] 
		(box :class "win" 
             :orientation "v" 
             :space-evenly "false" 
             :vexpand "false" 
             :hexpand "false" 
             :spacing 0
		(box  
             :orientation "h" 
             :space-evenly "false" 
             :vexpand "false" 
             :halign "center"
             :hexpand "false" 
             :spacing 0
			 (label :class "hour_class" 
                    :valign "start" 
                    :wrap "true" 
                    :limit-width 25 
                    :text time_hour)
			 (label :class "minute_class" 
                    :valign "start" 
                    :halign "start" 
                    :wrap "true" 
                    :limit-width 25 
                    :text time_min))
            (box :orientation "h" 
              :spacing 0 
              :space-evenly "false" 
              :halign "center"
              :vexpand "false" :hexpand "false" 
			  (label :class "day_class" 
                     :valign "start" 
                     :text time_day)
			  (label :class "time_sep"
                     :valign "start" 
                     :text " ")
			  (label :class "month_class" 
                     :valign "start" 
                     :text time_month))))


(defwidget day [] 
            (box :orientation "h" 
              :class "win"
              :spacing 0 
              :space-evenly "false" 
              :halign "center"
			  (label :class "day_class_n" 
                     :text time_day_name)
			  (label :class "time_sep"
                     :text ",")
			  (label :class "month_class_n" 
                     :text time_month_name
										)))

(defwidget system []
  (box :class "sys_win" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value { EWW_BATTERY.BAT0.capacity }
                :class {EWW_BATTERY.BAT0.status =~ "Full" ? "sys_dial green" :
								EWW_BATTERY.BAT0.capacity < 20 ? "sys_dial red" : "sys_dial yellow"}
                :thickness 11
				    		:color "00ff00"
            (label :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_RAM.used_mem_perc}
	              :class {EWW_RAM.used_mem_perc < 70  ? "sys_dial green" :
		              EWW_RAM.used_mem_perc < 90  ? "sys_dial yellow" : "sys_dial red"}
                :thickness 11
            (label :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false)))
      (box :class "sys_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_DISK["/"].used_perc}
	              :class {EWW_DISK["/"].used_perc < 70  ? "sys_dial green" :
		              EWW_DISK["/"].used_perc < 90  ? "sys_dial yellow" : "sys_dial red"}
                :thickness 11
            (label  :text ""
                :class "sys_icon"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0)))))


(defwidget cpus []
  (box :class "cpu_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0 
      (box :class "cpu_box" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_CPU.cores[0].usage}
	              :class {EWW_CPU.cores[0].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[0].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[1].usage}
	              :class {EWW_CPU.cores[1].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[1].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[2].usage}
	              :class {EWW_CPU.cores[2].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[2].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[3].usage}
	              :class {EWW_CPU.cores[3].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[3].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false)))
      (box :class "cpu_box_i" :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
      (circular-progress :value {EWW_CPU.cores[4].usage}
	              :class {EWW_CPU.cores[4].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[4].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[5].usage}
	              :class {EWW_CPU.cores[5].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[5].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[6].usage}
	              :class {EWW_CPU.cores[6].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[6].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
      (circular-progress :value {EWW_CPU.cores[7].usage}
	              :class {EWW_CPU.cores[7].usage < 70  ? "cpu_dial green" :
		              EWW_CPU.cores[7].usage < 90  ? "cpu_dial yellow" : "cpu_dial red"}
                :thickness 11
            (label :text "" :class "cpu_icon" :limit-width 2 :show_truncated false :wrap false))
)))





;  system
 ; (defwidget stats []
 ; 	(box :class "genwin" :vexpand "false" :hexpand "false"
 ; 		(box :orientation "h" :spacing 25 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
 ; 			(box :class "volume_bar" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
 ;                           (scale :flipped "true" :orientation "v" :min 0 :max 101 :value volume_percent :active "false" :onchange "amixer -D pulse sset Master {}%" )
 ;                           (label  :text "" :class "vol_icon"))
 ; 			(box :class "mic_bar" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
 ;                           (scale :flipped "true" :orientation "v" :min 0 :max 101 :value mic_percent :active "false")
 ;                           (label  :text "" :class "mic_icon"))
 ; 			(box :class "bright_bar" :onchange "brightnessctl set {}%" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
 ;                           (scale :flipped "true" :orientation "v" :min 0 :max 101 :value brightness :active "false")
 ;                           (label  :text "" :class "brg_icon"))
 ; 			(box :class "storage_bar" :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
 ;                       (scale :flipped "true" :orientation "v" :min 0 :max 101 :active "false" :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)})
 ;                       (label  :text ""
 ;                               :class "stor_icon")))))




; (defwindow clse
;   :monitor 0
;   :namespace "eww"
;   :stacking "fg"
;   :stacking "bg"
;   :geometry (geometry 
;              :width "50px"
;              :height "50px"
;              :x "295px"
;              :y "90px")
;   (close))


; (defwindow exit
;   :monitor 0
;   :namespace "eww"
;   :stacking "fg"
;   :stacking "bg"
;   :geometry (geometry 
;              :width "50px"
;              :height "50px"
;              :x "465px"
;              :y "75px")
;   (exit))

(defwindow time
  :monitor 0
  :namespace "eww"
  :stacking "fg"
  :stacking "bg"
  :geometry (geometry 
             :width "218px"
             :height "90px"
             :x "285px"
             :y "155px")
  (time))


(defwindow day_dot
  :monitor 0
  :namespace "eww"
  :stacking "fg"
  :stacking "bg"
  :geometry (geometry 
             :width "250px"
             :height "50px"
             :x "270px"
             :y "485px")
  (day))


(defwindow sys_usg
  :monitor 0
  :namespace "eww"
  :stacking "fg"
  :geometry (geometry 
             :width "340px"
             :height "120px"
             :x "5px"
             :y "5px")
  (system))

(defwindow sys_cpu
  :monitor 0
  :namespace "eww"
  :stacking "fg"
  :geometry (geometry 
             :width "340px"
             :height "130px"
             :x "5px"
             :y "130px")
  (cpus))


; (defwindow status
;   :monitor 0
;   :namespace "eww"
;   :stacking "fg"
;   :stacking "bg"
;   :geometry (geometry 
;              :width "220px"
;              :height "160px"
;              :x "40px"
;              :y "520px")
;   (stats))

; (defwindow fetch :stacking "fg" :focusable "false" :screen 1
;   :monitor 0
;   :namespace "eww"
;   :stacking "fg"
;   :geometry (geometry 
;              :width "260px"
;              :height "140px"
;              :x "255px"
;              :y "530px")
;   (fetch_sys))


; (defwindow song :stacking "fg" :focusable "false" :screen 1
;   :monitor 0
;   :namespace "eww"
;   :stacking "fg"
;   :geometry (geometry 
;              :width "248px"
;              :height "180px"
;              :x "253px"
;              :y "670px")
;   (music))

; (defwindow example
;            :monitor 0
;            :geometry (geometry :x "0px"
;                                :y "0px"
;                                :width "100%"
;                                :height "50px"
;                                :anchor "top left")
;            :stacking "fg"
;            ; :reserve (struts :distance "40px" :side "top")
;            ; :windowtype "dock"
;            ; :wm-ignore false
;   "example content")
