
" Vim and neovim should ignore viminfo
set shada="NONE"
set viminfo="NONE"

autocmd BufReadPost * if @% !~# '\.git[\/\\]COMMIT_EDITMSG$' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif 

set nocompatible
filetype plugin on

" Polyglot messes up FreeBSD indentation, etc.
let g:polyglot_disabled = ['autoindent']


call plug#begin('~/.config/nvim/plugged')
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/nerdtree'
Plug 'dense-analysis/ale'
Plug 'vim-airline/vim-airline'
call plug#end()



" ale linter options
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1

" nmap <silent> <C-q> <Plug>(ale_previous_wrap)
" nmap <silent> <C-w> <Plug>(ale_next_wrap)

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_fix_on_save = 1


let g:tex_flavor = "latex"
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_auto_insert_bullets = 0

" let g:airline_section_a=(mode, crypt, paste, spell, iminsert)
" let g:airline_section_b=''

if !exists('g:airline_symbols')                                           
    let g:airline_symbols = {}                                              
endif

let g:airline_left_sep=''
let g:airline_right_sep = '' " 
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline_symbols.linenr='Line:'
let g:airline_symbols.maxlinenr=''

let g:airline_symbols.whitespace = 'Ξ'
let g:airline_theme = "sys"


let g:airline#extensions#default#layout = [
      \ [ 'a', 'c' ],
      \ [ 'x', 'z', 'warning', 'error' ]
      \ ]
let g:airline#extensions#whitespace#enabled=0
let g:airline_detect_spell=0

" sections contain parts
" compose sections here
function! AirlineInit()
    let g:airline_section_a = airline#section#create(['mode'])
    let g:airline_section_c = airline#section#create(['file', 'readonly'])
    let g:airline_section_x = airline#section#create(['filetype', 'readonly'])
    let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

let g:airline#extensions#tabline#formatter = 'unique_tail'
" let g:airline#extensions#tabline#show_close_button = 0
" let g:airline#extensions#tabline#show_splits = 0
" let g:airline#extensions#tabline#show_tab_type = 0
" let g:airline#extensions#tabline#show_tab_nr = 1
" let g:airline#extensions#tabline#tab_nr_type = 1
" let g:airline#extensions#tabline#show_buffers = 0

" NERDTree
map <C-n> :NERDTreeToggle<CR>

" Split movement
" nnoremap <C-J> <C-W><C-K>
" nnoremap <C-K> <C-W><C-J>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

set guicursor=a:hor100
set guicursor+=a:blinkon0



set showcmd
set swapfile


" Appearance
syntax on
colorscheme sys
set t_Co=16             " 16 colours (xresources)
highlight ColorColumn ctermbg=0

" File specific stuff 
filetype plugin on
filetype indent on
set ffs=unix            " Unix files
set autoread            " reload if written elsewhere 
set showmatch           " match brackets

" No bells
set noerrorbells
set novisualbell

set mouse=v



" Fork Make
function! MAKE()
        let result = system("make > /dev/null &")
endfunction
command! M call MAKE()

" BSD style mode
function! BSD()
		set list
		set tabstop=8
        " set shiftwidth=8
        set noexpandtab
endfunction
command! BSD call BSD()

function! SyntaxGroup()
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")') 
endfunction
command! SYM call SyntaxGroup()




autocmd BufRead,BufNewFile *TODO set ft=markdown


set autoindent
" set listchars=tab:>-
set list
set noexpandtab
set shiftwidth=4
set tabstop=8
